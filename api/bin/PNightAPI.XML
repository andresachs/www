<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PNightAPI</name>
    </assembly>
    <members>
        <member name="T:RegistrationService">
            <summary>
            Summary description for RegistrationService
            </summary>
        </member>
        <member name="T:PublicThinUser">
            <summary>
            Summary description for PublicUser
            </summary>
        </member>
        <member name="T:Genre">
            <summary>
            Summary description for Genre
            </summary>
        </member>
        <member name="T:BlogGenres">
            <summary>
            Summary description for Genre
            </summary>
        </member>
        <member name="T:PublicBlogPost">
            <summary>
            Summary description for PublicBlogPost
            </summary>
        </member>
        <member name="T:AuthenticationFailureException">
            <summary>
            Summary description for AuthenticationFailureException
            </summary>
        </member>
        <member name="M:AuthenticationService.Authenticate(System.String,System.String,System.String,System.String)">
            <summary>
            Authenticate a client against the API
            </summary>
            <param name="wsApiId">The WebService API Key for the client <example>PNIGHT</example></param>
            <param name="secretKey">The secret key for the client<example>SECRET</example></param>
            <param name="user">Optional. Either a user name to authenticate against, or leave blank to authenticate as a guest</param>
            <param name="token">Optional, Required with user. The Facebook auth token for the given user id</param>
            <returns></returns>
        </member>
        <member name="M:AuthenticationService.IsGuestUser(System.String)">
            <summary>
            Discover if the currently authenticated user is a guest user
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="T:NotificationService">
            <summary>
            Summary description for NotificationService
            </summary>
        </member>
        <member name="M:NotificationService.GetUserHasPending(System.String)">
            <summary>
            Determine if the logged in user has any notifications pending. Throws an exception if current user is guest
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:NotificationService.ClearUserHasPending(System.String)">
            <summary>
            Clear the notifications pending flag for the logged in user. Throws an exception if current user is guest
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:NotificationService.GetUserNotifications(System.String,System.Int32,System.Int32)">
            <summary>
            Get a list of notifications for the current user. Throws an exception if current user is guest.
            
            The list returned includes the type of notification, the date/time it was added, and some associated information (usually the id for whatever type, i.e. postId)
            </summary>
            <param name="authToken"></param>
            <param name="numberRequired">The number of notifications to return, or 0 for all notifications <example>10</example></param>
            <param name="startIndex">The index at which to start returning notifications, begining at 0 <example>0</example></param>
            <returns></returns>
        </member>
        <member name="T:Blog">
            <summary>
            Summary description for blog_Blog
            </summary>
        </member>
        <member name="T:Utils">
            <summary>
            Summary description for Utils
            </summary>
        </member>
        <member name="T:UserService">
            <summary>
            Summary description for UserService
            </summary>
        </member>
        <member name="T:PublicBlogComment">
            <summary>
            Summary description for PublicBlogComment
            </summary>
        </member>
        <member name="T:Response`1">
            <summary>
            Summary description for Response
            </summary>
        </member>
        <member name="T:GenreService">
            <summary>
            Summary description for GenreService
            </summary>
        </member>
        <member name="M:GenreService.GetGenres(System.String)">
            <summary>
            Get a list of genres Project Nightlife indexes on
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:GenreService.GetParentGenre(System.String,System.String)">
            <summary>
            Get the parent genre for a given genre. If the provided genre is already a parent, the given genre is returned
            </summary>
            <param name="authToken"></param>
            <param name="genre">The genre to get the parent for <example>House</example></param>
            <returns></returns>
        </member>
        <member name="M:GenreService.GetTopLevelGenres(System.String)">
            <summary>
            Get a list of top level genres
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:GenreService.GetGenreHierarchy(System.String,System.String)">
            <summary>
            Get the sub-child hierarchy for a given genre, including itself
            </summary>
            <param name="authToken"></param>
            <param name="rootGenre">The root of the genre hierarchy to retreive<example>TestGenre</example></param>
            <returns></returns>
        </member>
        <member name="M:GenreService.RequestGenre(System.String,System.String,System.String)">
            <summary>
            Request a new genre for Project Nightlife to index on
            </summary>
            <param name="authToken"></param>
            <param name="genre">The genre you wish to request</param>
            <param name="ip">The ip of the user making the request</param>
            <returns></returns>
        </member>
        <member name="T:Database">
            <summary>
            Summary description for Database
            </summary>
        </member>
        <member name="T:User">
            <summary>
            Summary description for Account
            </summary>
        </member>
        <member name="T:SystemService">
            <summary>
            Summary description for SystemService
            </summary>
        </member>
        <member name="M:SystemService.GetMemoryOverview(System.String)">
            <summary>
            Gets an overview of the Project Nightlife Platform's memory usage
            </summary>
            <returns></returns>
        </member>
        <member name="M:SystemService.GetCPUOverview(System.String)">
            <summary>
            Gets an overview of the Project Nightlife Platform's CPU usage
            </summary>
            <returns></returns>
        </member>
        <member name="T:Facebook.FacebookAPI">
            <summary>
            Wrapper around the Facebook Graph API. 
            </summary>
        </member>
        <member name="M:Facebook.FacebookAPI.#ctor">
            <summary>
            Create a new instance of the API, with public access only.
            </summary>
        </member>
        <member name="M:Facebook.FacebookAPI.#ctor(System.String)">
            <summary>
            Create a new instance of the API, using the given token to
            authenticate.
            </summary>
            <param name="token">The access token used for
            authentication</param>
        </member>
        <member name="M:Facebook.FacebookAPI.Get(System.String)">
            <summary>
            Makes a Facebook Graph API GET request.
            </summary>
            <param name="relativePath">The path for the call,
            e.g. /username</param>
        </member>
        <member name="M:Facebook.FacebookAPI.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Makes a Facebook Graph API GET request.
            </summary>
            <param name="relativePath">The path for the call,
            e.g. /username</param>
            <param name="args">A dictionary of key/value pairs that
            will get passed as query arguments.</param>
        </member>
        <member name="M:Facebook.FacebookAPI.Delete(System.String)">
            <summary>
            Makes a Facebook Graph API DELETE request.
            </summary>
            <param name="relativePath">The path for the call,
            e.g. /username</param>
        </member>
        <member name="M:Facebook.FacebookAPI.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Makes a Facebook Graph API POST request.
            </summary>
            <param name="relativePath">The path for the call,
            e.g. /username</param>
            <param name="args">A dictionary of key/value pairs that
            will get passed as query arguments. These determine
            what will get set in the graph API.</param>
        </member>
        <member name="M:Facebook.FacebookAPI.Call(System.String,Facebook.HttpVerb,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Makes a Facebook Graph API Call.
            </summary>
            <param name="relativePath">The path for the call, 
            e.g. /username</param>
            <param name="httpVerb">The HTTP verb to use, e.g.
            GET, POST, DELETE</param>
            <param name="args">A dictionary of key/value pairs that
            will get passed as query arguments.</param>
        </member>
        <member name="M:Facebook.FacebookAPI.MakeRequest(System.Uri,Facebook.HttpVerb,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Make an HTTP request, with the given query args
            </summary>
            <param name="url">The URL of the request</param>
            <param name="verb">The HTTP verb to use</param>
            <param name="args">Dictionary of key/value pairs that represents
            the key/value pairs for the request</param>
        </member>
        <member name="M:Facebook.FacebookAPI.EncodeDictionary(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Encode a dictionary of key/value pairs as an HTTP query string.
            </summary>
            <param name="dict">The dictionary to encode</param>
            <param name="questionMark">Whether or not to start it
            with a question mark (for GET requests)</param>
        </member>
        <member name="P:Facebook.FacebookAPI.AccessToken">
            <summary>
            The access token used to authenticate API calls.
            </summary>
        </member>
        <member name="T:BlogService">
            <summary>
            Summary description for BlogService
            </summary>
        </member>
        <member name="M:BlogService.GetInsights(System.String,System.Double,System.Double)">
            <summary>
            Get the general insights for Project Nightlife blogs.
            </summary>
            <param name="authtoken"></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetBlog(System.String,System.Int32)">
            <summary>
            Get the basic information about a blog
            </summary>
            <param name="authToken"></param>
            <param name="blogId">ID of the blog to return information for <ex>1</ex></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetBlogs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Return a list of blogs, optionally filtering on a given genre or sub-genre
            </summary>
            <param name="authToken"></param>
            <param name="genre">Name of genre or sub-genre to filter by, or an empty string for no filter <example></example></param>
            <param name="numRequired">The number of blogs required, or 0 for all blogs <example>2</example></param>
            <param name="startIndex">The number at which to begin retrieving blogs at, begining at 0. Not used when numRequired is 0. <example>0</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetUsersBlog(System.String)">
            <summary>
            Get the basic information about a blog owned by the specified user. Determines blog from user's current token.
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetRelatedBlogs(System.String,System.Int32,System.Int32)">
            <summary>
            Get a list of related blogs for a given blog
            </summary>
            <param name="authToken"></param>
            <param name="blogId">The ID of the blog to retreive similar blogs for <example>1</example></param>
            <param name="numRequired">The number of similar blogs to retrieve <example>2</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetMostActiveBlogs(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Returns a list of the most active blogs. Only blogs which have published a post betwen dateFrom and dateTo will be returned.
            </summary>
            <param name="authToken"></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of posts required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetMostViewedBlogs(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Returns a list of the most viewed blogs. Only blogs which have posts with hits betwen dateFrom and dateTo will be returned.
            </summary>
            <param name="authToken"></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of posts required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetMostDiscussedBlogs(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Returns a list of the most discussed blogs. Only blogs which have posts with comments made betwen dateFrom and dateTo will be returned.
            </summary>
            <param name="authToken"></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of posts required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.AddOrUpdateBlog(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Add or update a blog
            </summary>
            <param name="authToken"></param>
            <param name="id">The id of the blog to work on. 0 to flag as a new blog</param>
            <param name="name">The name of the blog</param>
            <param name="slogan">The slogan of the blog</param>
            <param name="description">The description</param>
            <param name="thumbnail">The thumbnail of the post</param>
            <param name="genres">A comma seperated list of genre ids</param>
            <param name="ip">The ip adding/updating the blog</param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetBlogContributors(System.String,System.Int32)">
            <summary>
            Get the contributors of a Project Nightlife blog.
            </summary>
            <param name="authtoken"></param>
            <param name="blogId">The id of the blog you wish to obtain contributors for<example>1</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetBlogInsights(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Get the general insights for a Project Nightlife blog.
            </summary>
            <param name="authtoken"></param>
            <param name="blogId">The id of the blog you wish to obtain insights for<example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetBlogGenres(System.String,System.Int32)">
            <summary>
            Return a list of genres associated with the specified blog
            </summary>
            <param name="authToken"></param>
            <param name="blogId">The ID of the blog to return genres for <example>1</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetBlogSubscribers(System.String,System.Int32)">
            <summary>
            Get the users subscribed to the supplied blog
            </summary>
            <param name="authToken"></param>
            <param name="blogId">The id of the blog to get subscribers of<example>1</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.Subscribe(System.String,System.Int32)">
            <summary>
            Subscribe the current user to a blog. Returns 0 if current user is already subscribed.
            </summary>
            <param name="authToken"></param>
            <param name="blogId">The id of the blog to subscribe to</param>
            <returns></returns>
        </member>
        <member name="M:BlogService.Unsubscribe(System.String,System.Int32)">
            <summary>
            Unsubscribes the current user from a blog. Returns 0 if current user isn't subscribed.
            </summary>
            <param name="authToken"></param>
            <param name="blogId">The id of the blog to unsubscribe from</param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetComments(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return a list of comments associated with a blog post, ordered by creation date descending.
            </summary>
            <param name="authToken"></param>
            <param name="postId">The id of the post to fetch comments for <example>1</example></param>
            <param name="numberRequired">The number of comments to return, or 0 for all comments <example>2</example></param>
            <param name="startIndex">At which number comment to begin returning results, starting at 0<example>0</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.AddComment(System.String,System.Int32,System.String,System.String)">
            <summary>
            Add a new comment to a blog post
            </summary>
            <param name="authToken"></param>
            <param name="postId">The ID of the post to add the comment to</param>
            <param name="content">The text of the comment to add</param>
            <param name="ip">The IP address of the poster</param>
            <returns></returns>
        </member>
        <member name="M:BlogService.RemoveComment(System.String,System.Int32)">
            <summary>
            Delete a blog post comment. <br/>
            Exception will be thrown if callee is not the owener of the comment.
            </summary>
            <param name="authToken"></param>
            <param name="commentId">The ID of the comment to delete</param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetPost(System.String,System.Int32,System.Boolean)">
            <summary>
            Get a blog post
            </summary>
            <param name="authToken"></param>
            <param name="postId">The ID of the post to retrieve <example>1</example></param>
            <param name="addHit">Whether or not to log the hit for the viewing of this post<example>false</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetPosts(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a list of most recent blog posts, optionally filtered by genre
            </summary>
            <param name="authToken"></param>
            <param name="genre">The name of the Genre or Sub-Genre to filter posts by, or an empty string for no filter<example></example></param>
            <param name="numRequired">The number of posts required, or 0 for all <example>2</example></param>
            <param name="startIndex">The index at which to begin returning posts from, starting from 0. <example>0</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetFeaturedPosts(System.String)">
            <summary>
            Returns the current featured blog posts
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetPostsByBlog(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a list of most recent blog posts by specified blog
            </summary>
            <param name="authToken"></param>
            <param name="blogId">The ID of the Blog to select posts from <example>8</example></param>
            <param name="numRequired">The number of posts required, or 0 for all <example>5</example></param>
            <param name="startIndex">The index at which to begin returning posts from, starting from 0. <example>0</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetRelatedPosts(System.String,System.Int32,System.Int32)">
            <summary>
            Get a list of related blog posts for a given blog post
            </summary>
            <param name="authToken"></param>
            <param name="postId">The ID of the post to retrieve similar posts for <example>1</example></param>
            <param name="numberRequired">The number of similar posts required <example>6</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetMostViewedPosts(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Returns a list of the highest viewed blog posts. Only posts with hits between dateFrom and dateTo will be returned.
            </summary>
            <param name="authToken"></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of posts required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetMostDiscussedPosts(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Returns a list of the most discussed blog posts. Only posts with comments made between dateFrom and dateTo will be returned.
            </summary>
            <param name="authToken"></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of posts required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetTrendingPosts(System.String,System.Int32)">
            <summary>
            Returns a list of the current trending blog posts.
            </summary>
            <param name="authToken"></param>
            <param name="numRequired">The number of posts required - will return as many as possible if numRequired is greater than number exist<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.GetPostKeywords(System.String,System.Int32)">
            <summary>
            Get the list of keywords for a blog post
            </summary>
            <param name="authToken"></param>
            <param name="postId">The ID of the post to retrieve similar posts for <example>1</example></param>
            <returns></returns>
        </member>
        <member name="M:BlogService.AddOrUpdatePost(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Add or update a blog post
            </summary>
            <param name="authToken"></param>
            <param name="id">The id of the post to work on. 0 to flag as a new post</param>
            <param name="title">The title of the post</param>
            <param name="body">The body of the post</param>
            <param name="excerpt">The excerpt of the post</param>
            <param name="tags">A comma seperated list of keywords</param>
            <param name="thumbnail">The thumbnail of the post</param>
            <param name="ip">The ip adding/updating the post</param>
            <returns></returns>
        </member>
        <member name="M:BlogService.RemovePost(System.String,System.Int32,System.String)">
            <summary>
            Add a blog post
            </summary>
            <param name="authToken"></param>
            <param name="postId">The id of the post to remove</param>
            <param name="ip">The ip removing the post</param>
            <returns></returns>
        </member>
        <member name="T:ImageService">
            <summary>
            Summary description for ImageService
            </summary>
        </member>
        <member name="M:ImageService.GetPhotoLocations(System.String,System.Int32)">
            <summary>
            Get a list of photo sizes and locations for a given photoId
            </summary>
            <param name="authToken"></param>
            <param name="photoId">The id of the photo to get sizes for <example>125</example></param>
            <returns></returns>
        </member>
        <member name="M:ImageService.BlogUploadPhoto(System.String,System.String,System.String)">
            <summary>
            Upload an image to be used in content for a blog
            </summary>
            <param name="authToken"></param>
            <param name="base64Image">The base64 encoded string of the image</param>
            <param name="ip">The ip of the user uploading the photo</param>
            <returns></returns>
        </member>
        <member name="M:ImageService.BlogUploadProfile(System.String,System.String,System.String)">
            <summary>
            Upload a blog's thumbnail photo
            </summary>
            <param name="authToken"></param>
            <param name="base64Image">The base64 encoded string of the image</param>
            <param name="ip">The ip of the user uploading the photo</param>
            <returns></returns>
        </member>
        <member name="M:ImageService.BlogMakeMainPhoto(System.String,System.Int32,System.String)">
            <summary>
            Create the extra images required for a photo to become a post's main image. Creates the 80x80 thumbnail and the homepage featured image.
            </summary>
            <param name="authToken"></param>
            <param name="photoId">The id of the photo you wish to make the main photo for a post</param>
            <param name="ip">The ip of the user making the request</param>
            <returns></returns>
        </member>
        <member name="M:ImageService.RemovePhoto(System.String,System.Int32,System.String)">
            <summary>
            Remove an image
            </summary>
            <param name="authToken"></param>
            <param name="photoId">The ID of the photo to be removed</param>
            <param name="ip">The ip of the user making the request</param>
            <returns></returns>
        </member>
        <member name="M:ImageService.BlogDeallocateMainPhoto(System.String,System.Int32,System.String)">
            <summary>
            Deallocate an image as the blog post's main photo
            </summary>
            <param name="authToken"></param>
            <param name="photoId">The ID of the photo to be deallocated as a post's main photo</param>
            <param name="ip">The ip of the user making the request</param>
            <returns></returns>
        </member>
        <member name="T:BlogComment">
            <summary>
            Summary description for blog_Comment
            </summary>
        </member>
        <member name="T:Facebook.JSONObject">
            <summary>
            Represents an object encoded in JSON. Can be either a dictionary 
            mapping strings to other objects, an array of objects, or a single 
            object, which represents a scalar.
            </summary>
        </member>
        <member name="M:Facebook.JSONObject.CreateFromString(System.String)">
            <summary>
            Creates a JSONObject by parsing a string.
            This is the only correct way to create a JSONObject.
            </summary>
        </member>
        <member name="M:Facebook.JSONObject.ToDisplayableString">
            <summary>
            Prints the JSONObject as a formatted string, suitable for viewing.
            </summary>
        </member>
        <member name="M:Facebook.JSONObject.Create(System.Object)">
            <summary>
            Recursively constructs this JSONObject 
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.IsDictionary">
            <summary>
            Returns true if this JSONObject represents a dictionary.
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.IsArray">
            <summary>
            Returns true if this JSONObject represents an array.
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.IsString">
            <summary>
            Returns true if this JSONObject represents a string value. 
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.IsInteger">
            <summary>
            Returns true if this JSONObject represents an integer value.
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.IsBoolean">
            <summary>
            Returns true if this JSONOBject represents a boolean value.
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.Dictionary">
            <summary>
            Returns this JSONObject as a dictionary
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.Array">
            <summary>
            Returns this JSONObject as an array
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.String">
            <summary>
            Returns this JSONObject as a string
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.Integer">
            <summary>
            Returns this JSONObject as an integer
            </summary>
        </member>
        <member name="P:Facebook.JSONObject.Boolean">
            <summary>
            Returns this JSONObject as a boolean
            </summary>
        </member>
        <member name="T:NotAuthorizedException">
            <summary>
            Summary description for NotAuthorisedException
            </summary>
        </member>
        <member name="T:Session">
            <summary>
            Summary description for Session
            </summary>
        </member>
        <member name="T:PublicBlog">
            <summary>
            Summary description for PublicBlog
            </summary>
        </member>
        <member name="T:LogService">
            <summary>
            Summary description for LogService
            </summary>
        </member>
        <member name="M:LogService.GetErrorTypes(System.String)">
            <summary>
            Get the id's of the error types supported by Project Nightlife
            </summary>
            <param name="authToken"></param>
            <returns></returns>
        </member>
        <member name="M:LogService.LogAppHit(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Log an application hit. These hits will appear in your applications insights.
            </summary>
            <param name="authToken"></param>
            <param name="appId">Your application id</param>
            <param name="details">Details about the hit e.g. Page name (Limited to 50 characters)</param>
            <param name="ip">The ip initiating the request</param>
            <returns></returns>
        </member>
        <member name="M:LogService.LogAppError(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Log an error which occured between your application and the Project Nightlife Platform.
            </summary>
            <param name="authToken"></param>
            <param name="appId">Your application id</param>
            <param name="type">The type of error which occured. Must be a valid error id returned by GetErrorTypes().</param>
            <param name="userAgent">Provide the user agent used when the error occured (Limited to 128 characters)</param>
            <param name="details">Provide details of the error. e.g. The requested ajax call, php call, database call, platform exception etc... (Limited to 50 characters)</param>
            <returns></returns>
        </member>
        <member name="M:LogService.LogResponseTime(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Log how long it took the Project Nightlife Platform to serve a Project Nightlife Application's request.
            </summary>
            <param name="authToken"></param>
            <param name="appId">Your application id</param>
            <param name="details">Details about the content e.g. Page name (Limited to 50 characters)</param>
            <param name="milliseconds">The number of milliseconds elapsed since sending your first request to receiving your last response in order to generate a specific page in your applciation</param>
            <returns></returns>
        </member>
        <member name="M:LogService.NotifyError(System.String,System.Int32,System.String)">
            <summary>
            Allow user to log details about persistant errors in your application.
            </summary>
            <param name="authToken"></param>
            <param name="appId">Your application id</param>
            <param name="details">Details about the error</param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetTrafficInsights(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Get the general traffic insights for a Project Nightlife Application.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetErrorInsights(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Get the general error insights for a Project Nightlife Application.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetMostViewedPages(System.String,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Get the most common occuring hits for a Project Nightlife Application.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of pages required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetMostActiveUsers(System.String,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Get the most active users of a Project Nightlife Application.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="numRequired">The number of pages required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetMostPopularUserAgents(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Get the most popular User Agents of a Project Nightlife Application. Note - The User Agent named "IE" represents IE6, 7 and 8. IE 9 is represented by its own User Agent.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetMostCommonErrors(System.String,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Get the most common errors from a Project Nightlife Application.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294970976</example></param>
            <param name="numRequired">The number of pages required - will return as many as possible if numRequired is greater than the number that exist. A value of 0 indicates all.<example>5</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetUserAgentErrors(System.String,System.Int32,System.Double,System.Double)">
            <summary>
            Get the User Agent error counts of a Project Nightlife Application. Note - The User Agent named "IE" represents IE6, 7 and 8. IE 9 is represented by its own User Agent.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <returns></returns>
        </member>
        <member name="M:LogService.GetAvgResponseTime(System.String,System.Int32,System.Double,System.Double,System.String)">
            <summary>
            Get the Project Nightlife Platform's average response time (in milliseconds) for a Project Nightlife Application page.
            </summary>
            <param name="authtoken"></param>
            <param name="appId">Your Application's id. <example>1</example></param>
            <param name="dateFrom">A UNIX timestamp representing the start point of the window to return posts from. A value of 0 indicates 'now'.<example>0</example></param>
            <param name="dateTo">A UNIX timestamp representing the end point of the window to return posts from. A value of 0 indicates as far back as records go.<example>1294971976</example></param>
            <param name="page">The page you wish to receive times for (the 'details' parameter when logging the times)<example>/blogs</example></param>
            <returns></returns>
        </member>
        <member name="T:DatabaseFactory">
            <summary>
            Summary description for DatabaseFactory
            </summary>
        </member>
        <member name="T:BlogPost">
            <summary>
            Summary description for blog_Post
            </summary>
        </member>
        <member name="T:VenueService">
            <summary>
            Summary description for VenueService
            </summary>
        </member>
    </members>
</doc>
